//
//  NewsFeedInteractor.swift
//  VK-Light-presentation
//
//  Created by  Данил Дарский on 21.04.2020.
//  Copyright (c) 2020  Данил Дарский. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
// сетевой запрос

import UIKit

protocol NewsFeedBusinessLogic {
    func makeRequest(request: NewsFeed.Model.Request.RequestType)
}

protocol NewsFeedDataStore {
    //var name: String { get set }
}

class NewsFeedInteractor: NewsFeedBusinessLogic, NewsFeedDataStore {
    var presenter: NewsFeedPresentationLogic?
    var worker: NewsFeedWorker?
    
    //    массив ID ячеек с нажатой кнопкой postButton
    private var openedPostIds = [Int]()
    private var newsFeedResponse: ResponseNews?
    
    let fetcher: DataFetchProtocol = NetworkDataFetch(networking: ApiNews())
    
    // MARK: - Do Request
    
    func makeRequest(request: NewsFeed.Model.Request.RequestType) {
        if worker == nil {
            worker = NewsFeedWorker()
        }
        
        switch request {
        case .getNewsFeed:
            fetcher.getFeed { [weak self] (newsFeedResponse) in
                
                self?.newsFeedResponse = newsFeedResponse
                self?.presentNews()
            }
            
        case .openPostId(postId: let postId):
            openedPostIds.append(postId)
            presentNews()
        case .getUser:
            fetcher.getUser { [weak self] (userResponse) in
                self?.presenter?.presentData(response: NewsFeed.Model.Response.ResponseType.presentUserPhoto(user: userResponse))
            }
            
        }
        
        worker?.doSomeWork()
        
        //        let response = NewsFeed.Model.Response.ResponseType.self
        //        presenter?.presentData(response: response)
    }
    
    private func presentNews() {
        guard let newsFeedResponse = self.newsFeedResponse else {return}
        presenter?.presentData(response: NewsFeed.Model.Response.ResponseType.presentNewsFeed(feed: newsFeedResponse, openedPostIds: openedPostIds))
        
    }
    
}
